@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@if (DestinationToSave != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center p-4" @onclick="HandleBackgroundClick">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md relative" @onclick:stopPropagation>
            <button @onclick="Close" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl leading-none">&times;</button>

            <h3 class="text-xl font-semibold mb-4 text-gray-800">Save "@DestinationToSave.Name" to a Trip</h3>

            @if (AvailableTrips == null || !AvailableTrips.Any())
            {
                 <p class="text-gray-600">You don't have any trips yet. Create one first!</p>
                 <button @onclick="Close" class="mt-4 w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition duration-150 ease-in-out">
                    Close
                 </button>
            }
            else
            {
                <EditForm Model="this" OnValidSubmit="SaveToSelectedTrip">
                    <div class="mb-4">
                        <label for="tripSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Trip:</label>
                        <InputSelect id="tripSelect" @bind-Value="selectedTripId" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">-- Select a Trip --</option>
                            @foreach (var trip in AvailableTrips)
                            {
                                <option value="@trip.Id">@trip.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => selectedTripId)" />
                    </div>

                    <div class="flex justify-end gap-3 mt-6">
                        <button type="button" @onclick="Close" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-150 ease-in-out">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-150 ease-in-out" disabled="@string.IsNullOrEmpty(selectedTripId)">
                            Save
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}


@code {
    [Parameter] public Destination? DestinationToSave { get; set; }
    [Parameter] public List<TripViewModel>? AvailableTrips { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<TripViewModel> OnTripSelected { get; set; }

    [SupplyParameterFromForm]
    private string? selectedTripId { get; set; }

    private async Task Close()
    {
        selectedTripId = null; // Reset selection on close
        await OnClose.InvokeAsync();
    }

    private async Task SaveToSelectedTrip()
    {
        if (!string.IsNullOrEmpty(selectedTripId) && AvailableTrips != null)
        {
            var selectedTrip = AvailableTrips.FirstOrDefault(t => t.Id == selectedTripId);
            if (selectedTrip != null)
            {
                await OnTripSelected.InvokeAsync(selectedTrip);
            }
        }
         // Optionally handle case where trip is not found, though InputSelect should prevent this if bound correctly.
    }

    // Close modal if background is clicked
    private async Task HandleBackgroundClick()
    {
        await Close();
    }
}