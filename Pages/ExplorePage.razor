@page "/explore"
@using System.Linq

<div class="container mx-auto p-4 md:p-6 lg:p-8">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Explore Destinations</h1>

    <!-- Search and Filters -->
    <div class="mb-8 flex flex-col md:flex-row md:items-center gap-4">
        <div class="relative flex-grow">
            <input @bind="searchTerm" @bind:event="oninput" type="search" placeholder="Search destinations..."
                   class="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                <i class="fas fa-search"></i>
            </span>
        </div>

        <div class="flex flex-wrap gap-2 items-center">
            <span class="text-gray-600 font-medium mr-2">Filter by:</span>
            @foreach (var interest in availableInterests)
            {
                var localInterest = interest; // Required for lambda capture
                bool isSelected = selectedInterests.Contains(localInterest);
                string baseClasses = "px-4 py-2 rounded-full text-sm font-medium cursor-pointer transition duration-150 ease-in-out";
                string selectedClasses = isSelected ? "bg-blue-600 text-white shadow-md" : "bg-gray-200 text-gray-700 hover:bg-gray-300";
                <button class="@($"{baseClasses} {selectedClasses}")" @onclick="@(() => ToggleInterest(localInterest))">
                    @localInterest
                </button>
            }
        </div>
    </div>

    <!-- Destination Grid -->
    @if (filteredDestinations.Any())
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var destination in filteredDestinations)
            {
                var localDestination = destination; // Required for lambda capture
                <div @key="destination.Id" class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300 ease-in-out flex flex-col">
                    <img src="@destination.ImageUrl" alt="@destination.Name" class="w-full h-48 object-cover">
                    <div class="p-4 flex flex-col flex-grow">
                        <h3 class="text-xl font-semibold mb-2 text-gray-800">@destination.Name</h3>
                        <p class="text-gray-600 text-sm mb-3 flex-grow">@destination.Description</p>
                        <div class="mb-3">
                            <span class="text-xs font-semibold text-gray-500 uppercase">Best Months:</span>
                            <p class="text-sm text-gray-700">@string.Join(", ", destination.BestMonths)</p>
                        </div>
                         <div class="mb-4">
                             <span class="text-xs font-semibold text-gray-500 uppercase">Tags:</span>
                             <div class="flex flex-wrap gap-1 mt-1">
                                @foreach(var tag in destination.Tags)
                                {
                                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">@tag</span>
                                }
                             </div>
                         </div>
                        <button @onclick="@(() => OpenSaveModal(localDestination))"
                                class="mt-auto w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-150 ease-in-out">
                            <i class="fas fa-plus mr-2"></i>Save to Trip
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-10 text-gray-500">
            <p class="text-xl">No destinations match your criteria.</p>
            <p>Try adjusting your search or filters.</p>
        </div>
    }

</div>

<!-- Modal -->
@if (isModalVisible && selectedDestinationForModal != null)
{
    <SaveToTripModal DestinationToSave="selectedDestinationForModal"
                     AvailableTrips="availableTrips"
                     OnClose="CloseModal"
                     OnTripSelected="HandleTripSelected" />
}


@code {
    private string searchTerm = string.Empty;
    private List<string> selectedInterests = new List<string>();
    private List<Destination> allDestinations = new List<Destination>();
    private List<Destination> filteredDestinations = new List<Destination>();
    private Destination? selectedDestinationForModal;
    private bool isModalVisible = false;

    private List<string> availableInterests = new List<string> { "beach", "mountains", "culture", "food" };
    private List<TripViewModel> availableTrips = new List<TripViewModel>(); // Mocked data

    protected override void OnInitialized()
    {
        LoadSampleData();
        FilterDestinations(); // Initial filter application
    }

    private void LoadSampleData()
    {
        // Sample Destinations
        allDestinations = new List<Destination>
        {
            new Destination { Name = "Maui, Hawaii", Description = "Volcanic landscapes and stunning beaches.", BestMonths = new[] { "Apr", "May", "Sep", "Oct" }, Tags = new[] { "beach", "mountains" }, ImageUrl = "https://placehold.co/600x400?text=Maui" },
            new Destination { Name = "Kyoto, Japan", Description = "Ancient temples, gardens, and traditional culture.", BestMonths = new[] { "Mar", "Apr", "Oct", "Nov" }, Tags = new[] { "culture", "food" }, ImageUrl = "https://placehold.co/600x400?text=Kyoto" },
            new Destination { Name = "Rome, Italy", Description = "Historic heart of an empire, amazing food.", BestMonths = new[] { "Apr", "May", "Sep", "Oct" }, Tags = new[] { "culture", "food" }, ImageUrl = "https://placehold.co/600x400?text=Rome" },
            new Destination { Name = "Banff, Canada", Description = "Rocky Mountain peaks and turquoise lakes.", BestMonths = new[] { "Jun", "Jul", "Aug" }, Tags = new[] { "mountains" }, ImageUrl = "https://placehold.co/600x400?text=Banff" },
            new Destination { Name = "Phuket, Thailand", Description = "Popular beach destination with vibrant nightlife.", BestMonths = new[] { "Nov", "Dec", "Jan", "Feb" }, Tags = new[] { "beach", "food" }, ImageUrl = "https://placehold.co/600x400?text=Phuket" },
            new Destination { Name = "Machu Picchu, Peru", Description = "Incan citadel set high in the Andes Mountains.", BestMonths = new[] { "May", "Sep" }, Tags = new[] { "mountains", "culture" }, ImageUrl = "https://placehold.co/600x400?text=Machu+Picchu" }
        };

        // Sample Trips (for the modal)
        availableTrips = new List<TripViewModel>
        {
            new TripViewModel { Name = "Summer Vacation 2024" },
            new TripViewModel { Name = "Asia Backpacking Trip" },
            new TripViewModel { Name = "Weekend Getaway" }
        };

        filteredDestinations = new List<Destination>(allDestinations);
    }

    private void FilterDestinations()
    {
        var query = allDestinations.AsQueryable();

        // Filter by search term (case-insensitive)
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(d => d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                     d.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Filter by selected interests (must contain ALL selected tags)
        if (selectedInterests.Any())
        {
            query = query.Where(d => selectedInterests.All(interest => d.Tags.Contains(interest, StringComparer.OrdinalIgnoreCase)));
        }

        filteredDestinations = query.ToList();
        // No need for StateHasChanged() here as filtering is synchronous and triggered by UI events Blazor already handles.
    }

    private void ToggleInterest(string interest)
    {
        if (selectedInterests.Contains(interest))
        {
            selectedInterests.Remove(interest);
        }
        else
        {
            selectedInterests.Add(interest);
        }
        FilterDestinations();
    }

    private void OpenSaveModal(Destination destination)
    {
        selectedDestinationForModal = destination;
        isModalVisible = true;
        StateHasChanged(); // Needed because we are changing modal visibility state
    }

    private void CloseModal()
    {
        isModalVisible = false;
        selectedDestinationForModal = null;
        StateHasChanged(); // Needed because we are changing modal visibility state
    }

    private void HandleTripSelected(TripViewModel selectedTrip)
    {
        // In a real app, you would save the destination to the selected trip here.
        Console.WriteLine($"Destination '{selectedDestinationForModal?.Name}' added to trip '{selectedTrip.Name}'.");
        CloseModal();
    }
}