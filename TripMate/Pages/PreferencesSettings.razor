@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<div class="bg-white shadow-md rounded-lg p-4 sm:p-6">
    <h2 class="text-xl font-semibold text-gray-700 mb-4">Travel Preferences</h2>
    <EditForm Model="@editingSettings" OnValidSubmit="HandleSave" FormName="PreferencesSettingsForm">
        <DataAnnotationsValidator />

        <div class="space-y-4">
            @* Default Trip Type *@
            <div>
                <label for="tripType" class="block text-sm font-medium text-gray-700">Default Trip Type</label>
                <div class="relative mt-1">
                    <InputSelect id="tripType" @bind-Value="editingSettings.DefaultTripType" 
                        class="block w-full rounded-md border-gray-300 pr-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm appearance-none bg-white cursor-pointer shadow-sm">
                        <option value="">Select type...</option>
                        <option value="Business">Business</option>
                        <option value="Leisure">Leisure</option>
                        <option value="Adventure">Adventure</option>
                        <option value="Family">Family</option>
                        <option value="Backpacking">Backpacking</option>
                    </InputSelect>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                        <i class="fas fa-chevron-down text-gray-400"></i>
                    </div>
                </div>
                <ValidationMessage For="@(() => editingSettings.DefaultTripType)" />
            </div>

            @* Preferred Destinations *@
            <div>
                <label for="destinations" class="block text-sm font-medium text-gray-700">Preferred Destinations</label>
                <InputTextArea id="destinations" @bind-Value="preferredDestinationsString" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" rows="3" placeholder="Enter destinations, separated by commas (e.g., Paris, France, Tokyo, Japan)" />
                <p class="mt-1 text-xs text-gray-500">Separate destinations with a comma.</p>
            </div>

            @* Time Zone *@
            <div>
                <label for="timezone" class="block text-sm font-medium text-gray-700">Time Zone</label>
                <div class="relative mt-1">
                    <InputSelect id="timezone" @bind-Value="editingSettings.TimeZone" 
                        class="block w-full rounded-md border-gray-300 pr-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm appearance-none bg-white cursor-pointer shadow-sm">
                        <option value="">Select time zone...</option>
                        <option value="Etc/GMT+12">(GMT-12:00) International Date Line West</option>
                        <option value="Pacific/Midway">(GMT-11:00) Midway Island, Samoa</option>
                        <option value="Pacific/Honolulu">(GMT-10:00) Hawaii</option>
                        <option value="America/Anchorage">(GMT-09:00) Alaska</option>
                        <option value="America/Los_Angeles">(GMT-08:00) Pacific Time (US & Canada)</option>
                        <option value="America/Denver">(GMT-07:00) Mountain Time (US & Canada)</option>
                        <option value="America/Chicago">(GMT-06:00) Central Time (US & Canada)</option>
                        <option value="America/New_York">(GMT-05:00) Eastern Time (US & Canada)</option>
                        <option value="America/Caracas">(GMT-04:30) Caracas</option>
                        <option value="America/Halifax">(GMT-04:00) Atlantic Time (Canada)</option>
                        <option value="Etc/UTC">(GMT+00:00) UTC</option>
                        <option value="Europe/London">(GMT+00:00) London, Lisbon</option>
                        <option value="Europe/Paris">(GMT+01:00) Amsterdam, Berlin, Paris, Rome</option>
                        <option value="Asia/Tokyo">(GMT+09:00) Osaka, Sapporo, Tokyo</option>
                        <option value="Australia/Sydney">(GMT+10:00) Canberra, Melbourne, Sydney</option>
                    </InputSelect>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                        <i class="fas fa-chevron-down text-gray-400"></i>
                    </div>
                </div>
                <ValidationMessage For="@(() => editingSettings.TimeZone)" />
            </div>
        </div>

        @* Action Buttons *@
        <div class="mt-6 flex justify-end space-x-3">
            <button type="button" @onclick="HandleCancel" class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
            </button>
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" disabled="@isSaving">
                 @if (isSaving)
                {
                    <i class="fas fa-spinner fa-spin mr-2"></i>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="fas fa-save mr-2"></i>
                    <span>Save Changes</span>
                }
            </button>
        </div>
         <ValidationSummary class="mt-4 text-red-600" />
    </EditForm>
</div>

@code {
    [Parameter] public UserSettingsViewModel UserSettings { get; set; } = new();
    [Parameter] public EventCallback<UserSettingsViewModel> OnSave { get; set; }

    private UserSettingsViewModel editingSettings = new();
    private bool isSaving = false;

    // Helper property to bind InputTextArea to string[]
    private string preferredDestinationsString
    {
        get => string.Join(", ", editingSettings.PreferredDestinations ?? Array.Empty<string>());
        set
        {
            editingSettings.PreferredDestinations = value?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) ?? Array.Empty<string>();
        }
    }

    protected override void OnParametersSet()
    {
        editingSettings = UserSettings.Clone();
    }

    private async Task HandleSave()
    {
        isSaving = true;
        StateHasChanged();
        // The binding helper property automatically updates editingSettings.PreferredDestinations
        await OnSave.InvokeAsync(editingSettings);
        isSaving = false;
        StateHasChanged();
    }

    private void HandleCancel()
    {
        editingSettings = UserSettings.Clone();
        StateHasChanged();
    }
}